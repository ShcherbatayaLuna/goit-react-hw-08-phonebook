{"version":3,"file":"static/js/825.4bec9c6c.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/pages/Contacts/Contacts.styled.jsx","components/pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  padding: 20px;\n  border: 2px solid #1976d2;\n  margin-bottom: 20px;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n`;\n\nexport const Input = styled.input`\n  width: 250px;\n  padding: 8px;\n  border: 1px solid lightgray;\n  border-radius: 4px;\n  margin-bottom: 20px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 85px;\n  padding: 6px;\n  border: 1px solid lightgray;\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n\n  background-color: #ffffff;\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    color: #ffffff;\n    border: 1px solid #1976d2;\n    background-color: #1976d2;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { Form, Label, Input, Button } from './ContactForm.styled';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const contact = contacts.find(\n      event => event.name.toLowerCase() === name.toLowerCase()\n    );\n    contact\n      ? alert('This contact is already in list')\n      : dispatch(addContact({ id: nanoid(), name, number }));\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor=\"name\">Name</Label>\n      <Input\n        id=\"name\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleChange}\n      />\n      <Label htmlFor=\"phone\">Number</Label>\n      <Input\n        id=\"phone\"\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleChange}\n      />\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n`;\nexport const Label = styled.label`\n  margin-bottom: 10px;\n`;\n\nexport const Input = styled.input`\n  width: 250px;\n  padding: 8px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/contactsSelectors';\nimport { filterContact } from 'redux/contacts/contactsSlice';\nimport { Box, Label, Input } from './Filter.styled';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onChange = event => {\n    dispatch(filterContact(event.currentTarget.value));\n  };\n\n  return (\n    <Box>\n      <Label htmlFor=\"filter\">Find contacts by name</Label>\n      <Input\n        id=\"filter\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChange}\n      />\n    </Box>\n  );\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 450px;\n  padding: 10px;\n  margin: 0;\n`;\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`;\n\nexport const Text = styled.p`\n  margin: 0;\n  margin-right: 15px;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 85px;\n  padding: 6px;\n  border: 1px solid lightgray;\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n\n  background-color: white;\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    border: 1px solid #9a20bc;\n    background-color: #e589ff;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/contactsSelectors';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { List, ListItem, Text, Button } from './ContactList.styled';\n\nexport default function ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const lowercaseContacts = () => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const filterContacts = lowercaseContacts();\n\n  return (\n    <List>\n      {filterContacts?.map(({ id, name, phone }) => (\n        <ListItem key={id}>\n          <Text>\n            <b>{name}:</b> {phone}\n          </Text>\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </Button>\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  margin-top: 64px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const TitlePrimary = styled.h2`\n  margin: 0;\n  margin-bottom: 20px;\n  font-family: 'Roboto', sans-serif;\n  font-size: 28px;\n  font-weight: 600;\n  line-height: 1.75;\n  text-align: center;\n`;\n\nexport const TitleSecondary = styled.h2`\n  margin: 0;\n  margin-bottom: 20px;\n  font-family: 'Roboto', sans-serif;\n  font-size: 28px;\n  font-weight: 600;\n  line-height: 1.75;\n  text-align: center;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { selectToken } from 'redux/auth/authSelectors';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport ContactForm from '../../ContactForm/ContactForm';\nimport Filter from '../../Filter/Filter';\nimport ContactList from '../../ContactList/ContactList';\nimport {Box, TitlePrimary, TitleSecondary } from './Contacts.styled';\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const token = useSelector(selectToken);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    token && dispatch(fetchContacts());\n  }, [dispatch, token]);\n\n  return (\n    <Box>\n      <TitlePrimary>Phonebook</TitlePrimary>\n      <ContactForm />\n      {contacts && (\n        <>\n          <TitleSecondary>Contacts</TitleSecondary>\n          <Filter />\n          <ContactList />\n        </>\n      )}\n    </Box>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Form","styled","Label","Input","Button","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","event","target","value","onSubmit","preventDefault","contact","find","toLowerCase","alert","addContact","htmlFor","type","pattern","title","required","onChange","Box","Filter","filterContact","currentTarget","List","ListItem","Text","ContactList","filterContacts","includes","map","phone","onClick","deleteContact","TitlePrimary","TitleSecondary","Contacts","token","selectToken","useEffect","fetchContacts"],"sourceRoot":""}